clear all
clc

camera_model_names = {'D01_Samsung_GalaxyS3Mini'   'D02_Apple_iPhone4s'   'D03_Huawei_P9'     ...  
               'D04_LG_D290'   'D07_Lenovo_P70A'   'D12_Sony_XperiaZ1Compact' ...
               'D17_Microsoft_Lumia640LTE' 'D21_Wiko_Ridge4G'   'D23_Asus_Zenfone2Laser' ...
               'D24_Xiaomi_RedmiNote3'   'D25_OnePlus_A3000'};
video_scene_names = {'flat' 'indoor' 'outdoor'}; 
frame_folders = {'flat_frames' 'indoor_frames' 'outdoor_frames'};

filename = 'prnu_corr_exp3.csv';

num_frames_for_voting = 31;

% Check if file exists
file_exists = exist(filename);

% If file does not exist, create it
if file_exists == 0
    fid = fopen(filename,'w');
    fclose(fid);
end

fid = fopen(filename,'w');

% 创建结构体保存参考噪声图信息
ref_img_info = struct(); 
for i = 1:numel(camera_model_names)
	ref_dir = [camera_model_names{i} '/flat_frames/vid1/' camera_model_names{i} '_flat_frames_vid1_i_ref.jpg'];
	ref_img_info(i).name = [camera_model_names '_flat_frames_vid1_i_ref.jpg'];
	ref_img_info(i).photo = imread(ref_dir);
    disp(['参考噪声图已读取：' ref_img_info(i).name]);
end
disp(['参考噪声图已读取完毕！']);


% 计算相关系数
for i = 1:numel(camera_model_names)
	for j = 1:3
		vid_files = dir([camera_model_names{i} '/' frame_folders{j} ]);
        disp(['当前待检视频场景为：' [camera_model_names{i} '/' frame_folders{j} ]]);
		for k = 1:numel(vid_files)
			% 排除隐藏文件
			if vid_files(k).name(1) == '.'
				continue
			end

			% 排除参考噪声
			if (j == 1) & (vid_files(k).name(end-3:end) == '.jpg')
				continue
			end
			
            disp(['当前待检视频为：' [camera_model_names{i} '/' frame_folders{j} '/' vid_files(k).name] ]);

			frame_files = dir([camera_model_names{i} '/' frame_folders{j} '/' vid_files(k).name '/i']);

			ticket_counter = struct();
			for ref_count = 1:numel(camera_model_names)
				ticket_counter(ref_count).name = camera_model_names{ref_count};
				ticket_counter(ref_count).tickets = 0;
			end
            

            step = floor((numel(frame_files) - 3) / num_frames_for_voting); % 尽可能排除隐藏文件干扰
			abundance = mod((numel(frame_files) - 3) , num_frames_for_voting) ;
            

			voter = struct();
			voter_count = 1;
            % 先把抽出来的帧名字读入一下
            for frame_count = 4:step:(numel(frame_files) - abundance)
                voter(voter_count).name = [camera_model_names{i} '/' frame_folders{j} '/' vid_files(k).name '/i/' frame_files(frame_count).name];
                voter_count = voter_count + 1;
            end

            voter_count = 1;
			for frame_count = 4:step:(numel(frame_files) - abundance)
	            % 对于一个待测帧，记录它和所有设备指纹之间的相关系数
                prnu_corr_exp3 = struct();

			    for ref_count = 1:numel(camera_model_names)
					prnu_corr_exp3(ref_count).name = camera_model_names{ref_count};

					wait_to_test = imread([voter(voter_count).name]);
                    wait_to_test = algorithm1(wait_to_test);

					prnu_corr_exp3(ref_count).corr = corr2_rgb(wait_to_test ,  ref_img_info(ref_count).photo);
					fprintf(fid,[camera_model_names{i} '/' frame_folders{j} '/' vid_files(k).name '/' frame_files(frame_count).name  ',ref:' camera_model_names{ref_count} ',' num2str(prnu_corr_exp3(ref_count).corr) '\n']);
                end
                disp(['待测帧' frame_files(frame_count).name '与所有参考之间相关系数计算完毕！']);
                
				maxi = -1;
			    % 找出 prnu_corr_exp3.corr 中的最大值
				for ref_count = 1:numel(camera_model_names)
					if prnu_corr_exp3(ref_count).corr > maxi
						maxi = prnu_corr_exp3(ref_count).corr;
						voter(voter_count).ref = camera_model_names{ref_count};
					end
                end
                fprintf(fid, [camera_model_names{i} '/' frame_folders{j} '/' vid_files(k).name '/' frame_files(frame_count).name ',voted ' voter(voter_count).ref ',with maxi-corr ' num2str(maxi) '\n']);
			    disp([camera_model_names{i} '/' frame_folders{j} '/' vid_files(k).name '/' frame_files(frame_count).name ',voted ' voter(voter_count).ref ',with maxi-corr ' num2str(maxi)]);
                
				clear prnu_corr_exp3 maxi
                voter_count = voter_count + 1;
			end


			% 统计票数
			for vote_seq = 1:numel(voter)
				for ref_count = 1:numel(camera_model_names)
					if strcmp(voter(vote_seq).ref, ticket_counter(ref_count).name)
						ticket_counter(ref_count).tickets = ticket_counter(ref_count).tickets + 1;
					end
				end
            end
            disp(['当前待检视频:' [camera_model_names{i} '/' frame_folders{j} '/' vid_files(k).name] '计票完毕！']);

			% 找到票王
			% [max_tickets, winner] = max([ticket_counter.tickets]);
			winner = [];
			max_tickets = 0;
			for ref_count = 1:numel(camera_model_names)
				if ticket_counter(ref_count).tickets > max_tickets
					winner = ticket_counter(ref_count).name;
					max_tickets = max_tickets + ticket_counter(ref_count).tickets;
				end
			end

			fprintf(fid, [camera_model_names{i} '/' frame_folders{j} '/' vid_files(k).name ',winner:' winner ',with ' num2str(max_tickets) 'tickets!\n=================================================\n']);
			disp(['有理由认为当前待检视频是设备' winner '拍摄的！31 帧中有：' num2str(max_tickets) '帧投了该设备的票！']);
            clear voter voter_count winner max_tickets step abundance ticket_counter winner max_tickets
		end
	end
end

fclose(fid);







